<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Basic Object]]></title>
  <link href="http://flats.github.io/atom.xml" rel="self"/>
  <link href="http://flats.github.io/"/>
  <updated>2015-12-17T16:00:11-05:00</updated>
  <id>http://flats.github.io/</id>
  <author>
    <name><![CDATA[D. Flaherty]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    
    <title type="html"><![CDATA[Closures, Yield, and the Enumerable Module]]></title>
    <link href="http://flats.github.io/blog/2015/12/10/closures-yield-and-the-enumerable-module/"/>
    
    <updated>2015-12-10T18:08:24-05:00</updated>
    <id>http://flats.github.io/blog/2015/12/10/closures-yield-and-the-enumerable-module</id>
    
    <content type="html"><![CDATA[<p>I tried to make a class Enumerable by dynamically mixing in the Enumerable module and defining <code>#each</code> after declaring the class. I failed. This is my story.</p>

<hr />

<p>I was messing around with dynamically mixing in Ruby modules. Yep, I was pretty bored. Anyway, one of the most useful modules in Ruby is the <code>Enumerable</code> module. It’s a total badass. So I thought I’d try mixing it into a class that I had already defined and see if that worked out.</p>

<p>The first step is including it dynamically. Maybe I can just call the include method on my class!</p>
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="no">MyClass</span><span class="o">.</span><span class="n">include</span><span class="p">(</span><span class="no">Enumerable</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>Okay! That appears to work. No exceptions. Now let’s use it. I’ll try out using <code>#reduce</code>, one of my favorite higher-order functions in Ruby.</p>
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="n">my_thing</span> <span class="o">=</span> <span class="no">MyClass</span><span class="o">.</span><span class="n">new</span>
</span><span class="line"><span class="n">my_thing</span><span class="o">.</span><span class="n">reduce</span> <span class="p">{</span> <span class="o">|</span><span class="n">thing</span><span class="o">|</span> <span class="nb">puts</span> <span class="n">thing</span> <span class="p">}</span> <span class="c1"># =&gt; NoMethodError: undefined method `each&#39; for #&lt;MyClass:0x007fe59c0e3588&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>Oops. In order to take advantage of the Enumerable module, you need to include the module and <a href="http://www.rubydoc.info/stdlib/core/2.2.2/Enumerable">also define</a> an <code>#each</code> method.[^1] This makes a lot of sense - how can your class be enumerable in there’s nothing to enumerate?</p>

<p>Okay, let’s do that. I could just define it in my class definition and be done with it. I’m having fun working with dynamically modifying classes, though, so let’s just just pretend that doing that is not an option and we want to add this instance method to the class after it’s been defined.</p>

<p>Defining an instance method for a class after the class definition, however, is pretty awkward. We can’t just use the dot syntax on an instance, becuase that would definite our <code>#each</code> for just that one instance, not all instances of <code>MyClass</code>. The best way to do this is to use <code>#define_method</code>. We can, of course, use <code>Class#class_eval</code>, and it may be preferable from a <a href="http://greyblake.com/blog/2012/09/02/ruby-perfomance-tricks/">performance perspective</a>, but it’s not very readable and unless we absolutely need to squeeze every ounce of performance out of this code, we should avoid it.</p>

<p>The problem here is that <code>#define_method</code> is a private method that every class inherits from <code>Module</code>. So we can’t just call <code>MyClass.define_method</code>. We have to either create a method in the class definition that in turns calls <code>#define_method</code> for us,</p>
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="k">class</span> <span class="nc">MyClass</span>
</span><span class="line">  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">create_method</span><span class="p">(</span><span class="n">method_name</span><span class="p">,</span> <span class="n">method_body</span><span class="p">)</span>
</span><span class="line">    <span class="n">define_method</span><span class="p">(</span><span class="n">method_name</span><span class="p">,</span> <span class="n">method_body</span><span class="p">)</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line"><span class="k">end</span>
</span><span class="line">
</span><span class="line"><span class="n">each_body</span> <span class="o">=</span> <span class="nb">lambda</span> <span class="p">{</span>
</span><span class="line">  <span class="k">yield</span> <span class="mi">1</span>
</span><span class="line">  <span class="k">yield</span> <span class="mi">2</span>
</span><span class="line">  <span class="k">yield</span> <span class="mi">3</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line"><span class="no">MyClass</span><span class="o">.</span><span class="n">create_method</span><span class="p">(</span><span class="ss">:each</span><span class="p">,</span> <span class="n">each_body</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>or we have to use <code>#__send__</code>.</p>
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="n">my_thing</span><span class="o">.</span><span class="n">class</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="ss">:define_method</span><span class="p">,</span> <span class="ss">:each</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">  <span class="k">yield</span> <span class="mi">1</span>
</span><span class="line">  <span class="k">yield</span> <span class="mi">2</span>
</span><span class="line">  <span class="k">yield</span> <span class="mi">3</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>All instances of <code>MyClass</code> will now have our <code>#each</code>. Great. Let’s try using it now!</p>
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="n">my_thing</span> <span class="o">=</span> <span class="no">MyClass</span><span class="o">.</span><span class="n">new</span>
</span><span class="line"><span class="n">my_thing</span><span class="o">.</span><span class="n">map</span> <span class="p">{</span> <span class="o">|</span><span class="n">thing</span><span class="o">|</span> <span class="nb">puts</span> <span class="n">thing</span> <span class="p">}</span> <span class="c1"># =&gt; no block given (yield) (LocalJumpError)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>What? No block given? I definitely just passed in a block. What went wrong?</p>

<p>This is where we get into the hairy business of Ruby’s closures. Closures are a bit of a strange concept, especially in the context of object-oriented programming, in which we rely on objects for pretty much everything. Still, it’s worth knowing about closures, Ruby has them, and understanding them will help you in certain other functional or functional hybrid languages, such as JavaScript. Alan Skorkin has <a href="http://www.skorks.com/2010/05/closures-a-simple-explanation-using-ruby/">a nice, succinct definition of closures on his blog</a>:</p>

<blockquote>
  <p>A closure is basically a function/method that has the following two properties:</p>

  <p>• You can pass it around like an object (to be called later)<br />
• It remembers the values of all the variables that were in scope when the function was created. It is then able to access those variables when it is called even though they may no longer be in scope.</p>
</blockquote>

<p>I recommend his post about closures. It’s</p>

<p>http://yehudakatz.com/2009/11/15/metaprogramming-in-ruby-its-all-about-the-self/</p>

<p>https://banisterfiend.wordpress.com/2010/11/06/behavior-of-yield-in-define_method/</p>

<p>[^1] Also note that (from the Ruby documentation) “If <code>Enumerable#max</code>, <code>#min</code>, or <code>#sort</code> is used, the objects in the collection must also implement a meaningful <code>&lt;=&gt;</code> operator, as these methods rely on an ordering between members of the collection.”</p>
]]></content>
    
  </entry>
  
  <entry>
    
    <title type="html"><![CDATA[Getting to Know Ruby's Map and Reduce]]></title>
    <link href="http://flats.github.io/blog/2015/12/02/getting-to-know-rubys-map-and-reduce/"/>
    
    <updated>2015-12-02T21:27:10-05:00</updated>
    <id>http://flats.github.io/blog/2015/12/02/getting-to-know-rubys-map-and-reduce</id>
    
    <content type="html"><![CDATA[<p>The <code>#map</code> and <code>#reduce</code> functions are most closely associated with functional programming.<sup id="fnref:1"><a href="#fn:1" class="footnote">1</a></sup> Even so, Ruby, the object-oriented-est of all object-oriented programming languages, has robust implementations of both of these extremely expressive higher-order functions. I’m going to explore how to use these methods and what you can do with them, especially when you use them together. This will be pretty exhaustive, so be prepared for a <em>very</em> long blog post.</p>

<h1 id="first-the-basics">First, the Basics</h1>

<p>As <a href="https://en.wikipedia.org/wiki/Higher-order_function">higher-order functions</a>, each of these methods accepts a function in the form of a block. They then iterate over an enumerable object and call this block on each iteration. Where they differ is in what they do with the result of this block.</p>

<p><code>#map</code> (or <code>#collect</code>) returns an array containing the results of calling the supplied block on each element of the enumerable. In other words, map allows you to apply a function to every element of a data structure and receive the result.</p>

<p><code>#map</code> is usually called with a block, as in <code>collection.map { |element| element + 1 }</code>. If <code>collection = [1, 2, 3, 4]</code>, this will return <code>[2, 3, 4, 5]</code>. As with many other methods from the Enumerator module, if <code>#map</code> is called without a block, it will return an Enumerator.<sup id="fnref:2"><a href="#fn:2" class="footnote">2</a></sup></p>

<p><code>#reduce</code> (or <code>#inject</code>) returns a value that is the result of applying a binary operation to the return value of applying the supplied block to each element of the enumerable. Whoa. What a mouthful. In other words, <code>#reduce</code> “reduces” each element of an enumerable to a single value, accumulates that value in a single variable, and then returns the value of the accumulator. Some functional languages, such Scheme and OCaml, refer to this function as <code>fold</code>.</p>

<p>The simplest use of <code>#reduce</code> is just <code>collection.reduce(initial_value, :name_of_method)</code>. For example,</p>
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="n">array</span> <span class="o">=</span> <span class="o">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="o">]</span> <span class="c1"># =&gt; [1, 2, 3, 4]</span>
</span><span class="line"><span class="n">array</span><span class="o">.</span><span class="n">reduce</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="ss">:+</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="mi">10</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>calls the <code>#+</code> for each element in the array. The method that we specify (in this case, <code>#+</code>) has to be a binary method (a method called on one object with a single argument of another object), so we need a starting value, which we have in this case specified as 0. As we iterate through the array using reduce, this is what happens at each stage of the iteration:</p>
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="c1"># reduce sets up an accumulator variable, memo, and sets it to the initial</span>
</span><span class="line"><span class="c1"># value, which is 0.</span>
</span><span class="line"><span class="n">memo</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class="line"><span class="c1"># Now we hit the first element of the array.</span>
</span><span class="line"><span class="n">memo</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="ss">:+</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span> <span class="c1"># =&gt; 1</span>
</span><span class="line"><span class="c1"># The line above is the same as memo += 1 or memo.+(1).</span>
</span><span class="line"><span class="n">memo</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="ss">:+</span><span class="p">,</span> <span class="mi">2</span><span class="p">)</span> <span class="c1"># =&gt; 3</span>
</span><span class="line"><span class="n">memo</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="ss">:+</span><span class="p">,</span> <span class="mi">3</span><span class="p">)</span> <span class="c1"># =&gt; 6</span>
</span><span class="line"><span class="c1"># This is the last time through the array, so the value of memo at the end</span>
</span><span class="line"><span class="c1"># of this is the return value for reduce.</span>
</span><span class="line"><span class="n">memo</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="ss">:+</span><span class="p">,</span> <span class="mi">4</span><span class="p">)</span> <span class="c1"># =&gt; 10</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>There’s also the option of passing a block instead of the name of a function, which would look like</p>
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="n">array</span><span class="o">.</span><span class="n">reduce</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span> <span class="p">{</span> <span class="o">|</span><span class="n">sum</span><span class="p">,</span> <span class="n">element</span><span class="o">|</span> <span class="n">sum</span> <span class="o">+</span> <span class="n">element</span> <span class="p">}</span> <span class="c1"># =&gt; 10</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>for the example above.</p>

<p>If you don’t declare an initial value, the initial value will be the first element of the collection. This is <em>very</em> important! If, for example, you have an array of objects and you’re using <code>#reduce</code> to get the sum of an attribute, leaving out an initial value will lead to strange and undesirable results.</p>

<h1 id="some-interesting-map-and-reduce-examples">Some Interesting Map and Reduce Examples</h1>

<p>These functions are very powerful when used together. First, I’ll look at a couple of examples of using <code>#map</code> and <code>#reduce</code> on their own, and then I’ll get into an example of using reduce chained on to the end of map.</p>

<h3 id="reduce-as-an-alternative-to-recursion">Reduce as an Alternative to Recursion</h3>

<p>In his <a href="http://www.sitepoint.com/functional-programming-techniques-with-ruby-part-i/">series on functional programming in Ruby</a>, Nathan Kleyn mentions a question that Yehuda Katz asked several years ago about splitting a module name in a particular way.<sup id="fnref:3"><a href="#fn:3" class="footnote">3</a></sup> <a href="http://rubyquicktips.com/post/1018776470/embracing-functional-programming">One solution proposed by Bradley Grzesiak</a> demonstrates a particularly interesting use of <code>#reduce</code> (or, as in this case, <code>#inject</code>:</p>
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="n">module_name</span> <span class="o">=</span> <span class="s2">&quot;X::Y::Z&quot;</span>
</span><span class="line"><span class="n">module_name</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s1">&#39;::&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">inject</span><span class="p">(</span><span class="o">[]</span><span class="p">)</span> <span class="p">{</span> <span class="o">|</span><span class="n">memo</span><span class="p">,</span><span class="n">x</span><span class="o">|</span> <span class="n">memo</span><span class="o">.</span><span class="n">unshift</span><span class="p">(</span><span class="n">memo</span><span class="o">.</span><span class="n">empty?</span> <span class="p">?</span> <span class="n">x</span> <span class="p">:</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="n">memo</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span><span class="si">}</span><span class="s2">::</span><span class="si">#{</span><span class="n">x</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span> <span class="p">}</span>
</span><span class="line"><span class="o">=&gt;</span> <span class="o">[</span><span class="s2">&quot;X::Y::Z&quot;</span><span class="p">,</span> <span class="s2">&quot;X::Y&quot;</span><span class="p">,</span> <span class="s2">&quot;X&quot;</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>Let’s break this not-quite-recursive code down into separate steps.</p>

<ol>
  <li>
    <p>Mr. Grzesiak splits <code>module_name</code>, which is our starting string, on the scope resolution operator into the array [“X”, “Y”, “Z”].</p>
  </li>
  <li>
    <p>He then uses <code>#inject</code> with the <code>inject(initial)</code> syntax, which will initialize the accumulator, called <code>memo</code>, to an empty array.</p>
  </li>
  <li>
    <p>Now the iteration begins. If this new ‘memo’ array is empty, which will only happen on the first iteration of <code>#inject</code>, <code>#inject</code> adds that element (“X”) to the beginning of <code>memo</code> (using <code>Array#unshift</code>). Otherwise, <code>#inject</code> adds a string to <code>memo</code> containing the result of the previous iteration (“X”), the separator (“::”), and the current element (“Y”).</p>
  </li>
</ol>

<p>So, the final array is built backwards: [“X”], then [“X::Y”, “X”], and then finally [“X::Y::Z”, “X::Y”, “X”]. Nifty. There is certainly a recursive solution to this problem, but this is a great example of how higher-order functions can be used as an alternative to recursion.</p>

<h3 id="map-arrays-of-strings">Map Arrays of Strings</h3>

<p>The following is a chunk of code from the <a href="https://github.com/rails/rails/blob/master/actionmailer/lib/action_mailer/mail_helper.rb">MailHelper module of Rails 4.2.5’s ActionMailer module</a>.</p>
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="c1"># Returns +text+ wrapped at +len+ columns and indented +indent+ spaces.</span>
</span><span class="line"><span class="c1"># By default column length +len+ equals 72 characters and indent</span>
</span><span class="line"><span class="c1"># +indent+ equal two spaces.</span>
</span><span class="line"><span class="c1">#</span>
</span><span class="line"><span class="c1">#   my_text = &#39;Here is a sample text with more than 40 characters&#39;</span>
</span><span class="line"><span class="c1">#</span>
</span><span class="line"><span class="c1">#   format_paragraph(my_text, 25, 4)</span>
</span><span class="line"><span class="c1">#   # =&gt; &quot;    Here is a sample text with\n    more than 40 characters&quot;</span>
</span><span class="line"><span class="k">def</span> <span class="nf">format_paragraph</span><span class="p">(</span><span class="n">text</span><span class="p">,</span> <span class="n">len</span> <span class="o">=</span> <span class="mi">72</span><span class="p">,</span> <span class="n">indent</span> <span class="o">=</span> <span class="mi">2</span><span class="p">)</span>
</span><span class="line">  <span class="n">sentences</span> <span class="o">=</span> <span class="o">[[]]</span>
</span><span class="line">
</span><span class="line">  <span class="n">text</span><span class="o">.</span><span class="n">split</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">word</span><span class="o">|</span>
</span><span class="line">    <span class="k">if</span> <span class="n">sentences</span><span class="o">.</span><span class="n">first</span><span class="o">.</span><span class="n">present?</span> <span class="o">&amp;&amp;</span> <span class="p">(</span><span class="n">sentences</span><span class="o">.</span><span class="n">last</span> <span class="o">+</span> <span class="o">[</span><span class="n">word</span><span class="o">]</span><span class="p">)</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="s1">&#39; &#39;</span><span class="p">)</span><span class="o">.</span><span class="n">length</span> <span class="o">&gt;</span> <span class="n">len</span>
</span><span class="line">      <span class="n">sentences</span> <span class="o">&lt;&lt;</span> <span class="o">[</span><span class="n">word</span><span class="o">]</span>
</span><span class="line">    <span class="k">else</span>
</span><span class="line">      <span class="n">sentences</span><span class="o">.</span><span class="n">last</span> <span class="o">&lt;&lt;</span> <span class="n">word</span>
</span><span class="line">    <span class="k">end</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="n">indentation</span> <span class="o">=</span> <span class="s2">&quot; &quot;</span> <span class="o">*</span> <span class="n">indent</span>
</span><span class="line">  <span class="n">sentences</span><span class="o">.</span><span class="n">map!</span> <span class="p">{</span> <span class="o">|</span><span class="n">sentence</span><span class="o">|</span>
</span><span class="line">    <span class="s2">&quot;</span><span class="si">#{</span><span class="n">indentation</span><span class="si">}#{</span><span class="n">sentence</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="s1">&#39; &#39;</span><span class="p">)</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class="line">  <span class="p">}</span><span class="o">.</span><span class="n">join</span> <span class="s2">&quot;</span><span class="se">\n</span><span class="s2">&quot;</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>There’s nothing too remarkable about this method and its use of map, but I’m going to break it down because it’s a good example of <code>#map</code> in some very widely used code. This code is proobably executing somewhere at this very moment.</p>

<p>As the comment says, this method <code>format_paragraph</code> takes a chunk of text that needs formatting, a line length that defaults to 72, and an indent length (in spaces) that defatuls to 2. There are two steps to this process: first break the text into lines, and then indent each line by the specified indent size.</p>

<p>In the first step, our function creates an array of arrays <code>sentences</code>, each array of which comprises the strings that make up each line. The combined character count of the words in each of these nested arrays is not greater than the specified line length (<code>len</code>).</p>

<p>The second step is where we use map to add the proper indentation to each line. After building up the indentation as a string of whitespace using <code>String#*</code>, our function mutates the array of line arrays by using <code>#map!</code> to join the words with a space (rebuild then sentence) and prepend the indentation spaces. Then the lines are all joined with line breaks. Now we have a formatted paragraph.</p>

<h3 id="map-and-reduce-in-tandem">Map and Reduce in Tandem</h3>

<p>Haitham Mohammad put <code>#transpose</code> <a href="http://rubyquicktips.com/post/18842314838/some-array-magic-using-transpose-map-and-reduce">through its paces</a> on <a href="http://rubyquicktips.com/">Ruby Quicktips</a>, the same site that gave us the above solution. <code>#transpose</code>, <a href="http://ruby-doc.org/core-2.2.0/Array.html#method-i-transpose">according to the Ruby documentation</a>, “assumes that self is an array of arrays and transposes the rows and columns.” In other words, if you imagine an array of arrays as rows in a table, <code>#transpose</code> will return the columns from that table.</p>

<p>Mr. Mohammad then shows us how to get the sum of each column of table represented by an array of row arrays.</p>
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="n">a</span> <span class="o">=</span> <span class="o">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="o">]</span>
</span><span class="line"><span class="n">b</span> <span class="o">=</span> <span class="o">[</span><span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="o">]</span>
</span><span class="line"><span class="n">c</span> <span class="o">=</span> <span class="o">[</span><span class="mi">7</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">9</span><span class="o">]</span>
</span><span class="line">
</span><span class="line"><span class="o">[</span><span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">,</span> <span class="n">c</span><span class="o">].</span><span class="n">transpose</span><span class="o">.</span><span class="n">map</span> <span class="p">{</span> <span class="o">|</span><span class="n">x</span><span class="o">|</span> <span class="n">x</span><span class="o">.</span><span class="n">reduce</span> <span class="ss">:+</span> <span class="p">}</span>
</span><span class="line"><span class="c1"># =&gt; [12, 15, 18]</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<hr />

<p>So there’s a bit about <code>#map</code> and <code>#reduce</code>. There’s a lot more to discuss - for example, these methods <a href="http://yeungda.com/2011/11/01/ruby-lambda-keyword.html">can take lambdas, too!</a> - but this is already a very long post.</p>

<p>I love these guys.</p>

<div class="footnotes">
  <ol>
    <li id="fn:1">
      <p><a href="https://en.wikipedia.org/wiki/Lisp_(programming_language)">Lisp</a>, one of the oldest high-level programming languages, pioneered the use of higher-order functions. While it supports several different programming paradigms, Lisp and its most popular dialects, Common Lisp and Scheme, are most commonly used to program in the functional programming paradigm. <a href="#fnref:1" class="reversefootnote">&#8617;</a></p>
    </li>
    <li id="fn:2">
      <p>Enumerators are a large topic in and of themselves - for more information, see the <a href="http://ruby-doc.org/core-2.2.0/Enumerator.html">Ruby documentation</a>. <a href="#fnref:2" class="reversefootnote">&#8617;</a></p>
    </li>
    <li id="fn:3">
      <p>I’m curious as to the exact context for this problem. Obviously this has something to do with parsing a call to a class or module that uses the scope resolution operator, but if anyone has any more detils, <a href="&#109;&#097;&#105;&#108;&#116;&#111;:&#100;&#097;&#118;&#105;&#100;&#046;&#102;&#108;&#097;&#104;&#101;&#114;&#116;&#121;&#064;&#102;&#108;&#097;&#116;&#105;&#114;&#111;&#110;&#115;&#099;&#104;&#111;&#111;&#108;&#046;&#099;&#111;&#109;">let me know</a>. <a href="#fnref:3" class="reversefootnote">&#8617;</a></p>
    </li>
  </ol>
</div>
]]></content>
    
  </entry>
  
</feed>