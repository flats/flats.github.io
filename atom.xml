<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Basic Object]]></title>
  <link href="http://flats.github.io/atom.xml" rel="self"/>
  <link href="http://flats.github.io/"/>
  <updated>2016-02-07T02:18:37-05:00</updated>
  <id>http://flats.github.io/</id>
  <author>
    <name><![CDATA[D. Flaherty]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    
    <title type="html"><![CDATA[Sets and Set Operators in Ruby]]></title>
    <link href="http://flats.github.io/blog/2016/02/07/sets-and-set-operators-in-ruby/"/>
    
    <updated>2016-02-07T01:16:36-05:00</updated>
    <id>http://flats.github.io/blog/2016/02/07/sets-and-set-operators-in-ruby</id>
    
    <content type="html"><![CDATA[<p>Though they’re rarely used, Ruby supports <a href="https://en.wikipedia.org/wiki/Set_(mathematics)">sets</a> - unordered collections of unique objects. The <code>Set</code> class isn’t required by default, so you’ll have to <code>require 'set'</code>, and the constructor is a little verbose compared to that of an array or a hash<sup id="fnref:1"><a href="#fn:1" class="footnote">1</a></sup>, but sometimes they’re just what you need.</p>

<p>They have a couple of big advantages over Ruby’s arrays and hashes:</p>

<ol>
  <li>
    <p>A set only contains unique elements, which makes uniqueness checks unnecessary. Adding an element to a set that is already a member of that set will just fail silently.</p>
  </li>
  <li>
    <p>While looking up an element by index is not possible (as it is with <code>Array</code>), looking up an element is faster than in an array<sup id="fnref:2"><a href="#fn:2" class="footnote">2</a></sup>. This is, <a href="http://ruby-doc.org/stdlib-2.3.0/libdoc/set/rdoc/Set.html#method-i-union">as the Ruby documentation says</a>, because “<code>Set</code> uses Hash as storage.”</p>
  </li>
</ol>

<p>In addition, the <code>Set</code> class introduces some interesting methods (including <code>#disjoint?</code>, <code>#intersect?</code>, <code>#classify</code>, and <code>#divide</code>) and operators. Perhaps the most useful of these are <code>&amp;</code> (the intersection operator), <code>|</code> (the union operator), <code>-</code> (the difference operator), and <code>^</code> (the exclusion operator). <em>All but the last of these can also be used with arrays in Ruby</em>.</p>

<p>Some quick examples:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="no">Set</span><span class="o">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="o">]</span> <span class="o">&amp;</span> <span class="no">Set</span><span class="o">[</span><span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="o">]</span> <span class="c1"># =&gt; #&lt;Set: {3, 4}&gt;</span>
</span><span class="line"><span class="no">Set</span><span class="o">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="o">]</span> <span class="o">|</span> <span class="no">Set</span><span class="o">[</span><span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="o">]</span> <span class="c1"># =&gt; #&lt;Set: {1, 2, 3, 4, 5, 6}&gt;</span>
</span><span class="line"><span class="no">Set</span><span class="o">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="o">]</span> <span class="o">^</span> <span class="no">Set</span><span class="o">[</span><span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="o">]</span> <span class="c1"># =&gt; #&lt;Set: {5, 6, 1, 2}&gt;</span>
</span><span class="line"><span class="no">Set</span><span class="o">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="o">]</span> <span class="o">-</span> <span class="no">Set</span><span class="o">[</span><span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="o">]</span> <span class="c1"># =&gt; #&lt;Set: {1, 2}&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<div class="footnotes">
  <ol>
    <li id="fn:1">
      <p>You have to use the explicit constructor (<code>Set.new [1, 2, 3, 4]</code> or <code>Set[1, 2, 3, 4]</code>). You can also turn an array into a set with the <code>#to_set</code> method. <a href="#fnref:1" class="reversefootnote">&#8617;</a></p>
    </li>
    <li id="fn:2">
      <p>This is because arrays are really best at index lookups. <a href="https://github.com/ahoward/arrayfields">ArrayFields</a> is an interesting Ruby library that appears to combine the best of hashes and arrays, adding fast keyword lookup using the same syntax as hashes. <a href="#fnref:2" class="reversefootnote">&#8617;</a></p>
    </li>
  </ol>
</div>
]]></content>
    
  </entry>
  
  <entry>
    
    <title type="html"><![CDATA[AudioRecorder Walkthrough: Web Audio, WebRTC, and Web Workers]]></title>
    <link href="http://flats.github.io/blog/2016/01/25/audiorecorder-walkthrough-web-audio-and-webrtc/"/>
    
    <updated>2016-01-25T13:09:44-05:00</updated>
    <id>http://flats.github.io/blog/2016/01/25/audiorecorder-walkthrough-web-audio-and-webrtc</id>
    
    <content type="html"><![CDATA[<p>As a musician, engineer, and web developer, it has been very exciting to watch the Web Audio and WebRTC APIs mature. A robust platform for audio on the web has the potential to usher in a new era of collaborative music creation and social audio sharing. While native desktop DAW applications such as Pro Tools, Logic, Ableton Live, FL Studio, GarageBand, Digital Performer, and Cubase have grown more powerful and flexible over the last several years, facilities for collaboration and social sharing haven’t really kept pace.<sup id="fnref:1"><a href="#fn:1" class="footnote">1</a></sup> Perhaps the DAW of the future will be a web application, something like the audio equivalent of Google Docs.</p>

<p>I can dream. Or I can take things apart, see how they work, and then build new things.</p>

<h2 id="recorderjs">recorder.js</h2>

<p>In this post, I’ll walk through a popular demo of recording with the Web Audio API. In the process, I’ll touch on the basics of the Web Audio API, Web Workers, and WebRTC, a trio of fledgling web technologies that combine to allow us to record and process audio in the brower.</p>

<p>The <a href="https://webaudiodemos.appspot.com/AudioRecorder/index.html">AudioRecorder demo</a> is simple recording interface comprising three parts: an animated spectrograph of the client’s current audio input, a record button that starts and stops recording audio (and displaying the recorded audio’s waveform) from that input, and a save button that allows the user to download the recorded audio as a WAV file. I’m just going to focus on the latter two here, those responsible for recording audio, displaying the audio’s waveform while recording, and finally saving the recording. Most of this functionality comes from <a href="https://github.com/mattdiamond/Recorderjs">Matt Diamond’s fantastic recorder.js</a> plugin.</p>

<h2 id="part-1-mainjs">Part 1: main.js</h2>

<p>You can <a href="https://webaudiodemos.appspot.com/AudioRecorder/js/main.js">follow along with main.js here</a>.</p>

<p>Like most JavaScript that takes advantage of bleeding-edge browser features, this application’s Javascript begins with a whole bunch of feature detection to make sure that the browser is capable of animating the audio display and obtaining an audio stream using WebRTC. At this time, the WebRTC <a href="http://caniuse.com/#feat=rtcpeerconnection">is partially implemented in some browsers and not supported at all in several browsers</a>. It provides access to a video and/or audio stream from the user using <code>navigator.getUserMedia()</code>, which takes a parameter of <code>constraints</code>. The constraints are either <code>optional</code> or <code>mandatory</code>. In this case, the recorder is using the <code>mandatory</code> constraints to disable a handful of default audio behaviors in Chrome.</p>

<p>Now we get into the Web Audio API, which allows us to work with audio in the browser. It <a href="http://caniuse.com/#feat=audio-api">is quite well-supported in modern browsers</a>. Much as the HTML <code>&lt;canvas&gt;</code> element allows us to get a 2D or 3D drawing context in JavaScript, the <code>AudioContext()</code> constructor gives us a context in which we can connect sound sources and destinations (which the Web Audio API collectively calls <code>AudioNode</code>s). Everything that the Web Audio API does happens within AudioContext objects, which are directed graphs of AudioNodes that are responsible for receiving, producing, transforming, and emitting audio signals.<sup id="fnref:2"><a href="#fn:2" class="footnote">2</a></sup> In this way, it works similarly to my beloved Minimoog compact modular synthesizer from the 1970s, with its oscillators, mixer, and filters, or to a recording studio with its many microphones, processors (EQ, compression, effects, and so on), mixing console, and recording devices (tape machines and computers).</p>

<div class="bogus-wrapper"><notextile><figure>
  <img src="http://flats.github.io/images/minimoog800x600.jpg" alt="My beloved Model D Minimoog" title="Minimoog Model D Control Panel" />  
  <figcaption style="width: 100%; margin-bottom: 2.25em; margin-top: 1em; font-size: .8em; text-align: center;">The control panel of my beloved Model D Minimoog.</figcaption>
</figure></notextile></div>

<p>In this case, the callback passed to <code>getUserMedia()</code>, <code>gotStream()</code>, is called when the stream is successfully obtained and goes about creating a bunch of AudioNodes on the context and connecting them. There’s an <code>inputPoint</code> node for controlling gain, a <code>realAudioInput</code> for actually getting the audio, an <code>analyserNode</code> for performing a Fourier transform on the audio (this is for displaying the spectrograph or “analyser”), and finally a <code>zeroGain</code> node that is the endpoint of the audio in the context. The recorder just records audio and doesn’t actually output any audio directly, so the <code>zeroGain</code> just receives the audio at the end of the chain and silences it. Right before that connection is made, a new <code>Recorder</code> object is created with the stream from <code>getUserMedia()</code> as its source.</p>

<div class="bogus-wrapper"><notextile><figure>
  <img src="http://flats.github.io/images/audio-graph.png" alt="Graphical representation of audio graph" title="AudioRecorder Audio Graph" />  
  <figcaption style="width: 100%; margin-bottom: 2.25em; margin-top: 1em; font-size: .8em; text-align: center;">A graphical representation of the audio graph created in <em>gotStream()</em>.</figcaption>
</figure></notextile></div>

<p>Okay, so that covers the initialization of the application. The rest of the application, save the analyzer that I won’t cover in detail here, is event driven. The <code>toggleRecord()</code> function is triggered by the click event on the record button, which in turn either stops or starts the recording.</p>

<p>We’ll start with the recorder activation. <code>clear()</code> is called on the instance of <code>Recorder</code> created in <code>gotStream()</code>, followed by <code>record()</code>. The methods are implemented in Matt Diamond’s recorder.js.</p>

<h2 id="part-2-recorderjs">Part 2: recorder.js</h2>

<p>The Web Audio API provides many pre-built AudioNode objects that cover most use cases that are generally written in a lower-level language than JavaScript (usually C or C++). However, it’s also possible to create your own processing object directly in JavaScript using the <code>createScriptProcessor()</code> method of <code>AudioContext</code>, which is how Mr. Diamond deals with recording audio in recorder.js.</p>

<p>In addition, Mr. Diamond’s recorder.js makes use of the <a href="https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API/Using_web_workers">Web Worker API</a>, another relatively new browser API that gives developers the ability to run background processes. The API, which <a href="http://caniuse.com/#feat=webworkers">is quite well-supported in modern browsers</a>, exposes a constructor function, <code>Worker()</code>, that takes an argument of the JavaScript file that will run on its own thread in the background. The worker in recorder.js is assigned to <a href="https://webaudiodemos.appspot.com/AudioRecorder/js/recorderjs/recorderWorker.js">the recorderWorker.js file</a>, which we’ll get to in a moment.</p>

<p>The <code>Recorder()</code> constructor begins by creating a script processor and setting a buffer length for recording audio. Communication between a worker and the script that spawned it is achieved through message passing, so this function then passes the ‘init’ message to the worker along with a config object that specifies the sample rate.</p>

<p>The worker script contains all of the guts of the recorder. The entire process of passing audio from the left and right channel input buffers to the recording buffers and creating a WAV file from those buffers is encapsulated in this worker. The <code>switch</code> statement on the ‘onmessage’ event at the top of the function, which receives the ‘command’ and ‘buffer’ parameters sent from recorder.js, controls the workers behavior - the ‘record’, ‘exportWAV’, ‘getBuffers’, and ‘clear’ messages kick off those actions in the worker.</p>

<h2 id="intermission">Intermission</h2>

<p>I’ll be updating this post with more details on this worker and the recorder.js flow at a later date. In the meantime, make some noise at your laptop.</p>

<h3 id="more-resources">More Resources</h3>

<p>Web Audio API at MDN: <a href="https://developer.mozilla.org/en-US/docs/Web/API/Web_Audio_API">https://developer.mozilla.org/en-US/docs/Web/API/Web_Audio_API</a></p>

<p>Tutorial at HTML5 Rocks: <a href="http://www.html5rocks.com/en/tutorials/webaudio/intro/">http://www.html5rocks.com/en/tutorials/webaudio/intro/</a></p>

<div class="footnotes">
  <ol>
    <li id="fn:1">
      <p>Soundcloud and Bandcamp are fantastic platforms, but because neither of them provide any creation tools (unlike platforms like Instagram and Vine), they’re largely out of reach for non-professional users. <a href="#fnref:1" class="reversefootnote">&#8617;</a></p>
    </li>
    <li id="fn:2">
      <p>There’s more about the audio graph in Boris Smus’s <a href="http://chimera.labs.oreilly.com/books/1234000001552">excellent book on the Web Audio API</a>. <a href="#fnref:2" class="reversefootnote">&#8617;</a></p>
    </li>
  </ol>
</div>
]]></content>
    
  </entry>
  
  <entry>
    
    <title type="html"><![CDATA[Frozen Strings, Symbols, and Garbage Collection in Ruby]]></title>
    <link href="http://flats.github.io/blog/2016/01/03/frozen-strings/"/>
    
    <updated>2016-01-03T03:21:09-05:00</updated>
    <id>http://flats.github.io/blog/2016/01/03/frozen-strings</id>
    
    <content type="html"><![CDATA[<p>I was perusing <a href="https://github.com/thoughtbot/paperclip">the paperclip gem’s source code</a> when I came upon the following line (lib/paperclip/interpolations.rb, line 178):</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="p">(</span><span class="s2">&quot;%09d&quot;</span><span class="o">.</span><span class="n">freeze</span> <span class="o">%</span> <span class="nb">id</span><span class="p">)</span><span class="o">.</span><span class="n">scan</span><span class="p">(</span><span class="sr">/\d{3}/</span><span class="p">)</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="s2">&quot;/&quot;</span><span class="o">.</span><span class="n">freeze</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>It’s a useful bit of code for saving attachments to a filesystem, but what struck me immediately was the preponderance of <code>#freeze</code> calls. What the hell is <code>#freeze</code> anyway?</p>

<p>Well, apparently <code>#freeze</code> is relatively common in mature Ruby code. It’s a method of the <code>Object</code> class, and <a href="http://ruby-doc.org/core-2.3.0/Object.html#method-i-freeze">“it prevents further modifications” of an object</a>.</p>

<p>There are a couple of reasons you might want to use it.</p>

<h3 id="making-an-object-immutable">1. Making an Object Immutable</h3>

<p>Ruby constants are really just variables that you shouldn’t change. Ruby will warn you if you change a constant, but it won’t raise an exception. So, if you really want to have Ruby enforce the constancy of a constant, you can freeze that object.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="no">JEDI_MASTER</span> <span class="o">=</span> <span class="s2">&quot;Kenobi&quot;</span><span class="o">.</span><span class="n">freeze</span>
</span><span class="line"><span class="no">JEDI_MASTER</span><span class="o">.</span><span class="n">prepend</span><span class="p">(</span><span class="s2">&quot;Rey &quot;</span><span class="p">)</span> <span class="c1"># =&gt; RuntimeError: can&#39;t modify frozen String</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Remember that when you assign a frozen object to a variable, this does not prevent the variable from being reassigned to another object. The following code, for example, works just fine:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="no">JEDI_MASTER</span> <span class="o">=</span> <span class="s2">&quot;Kenobi&quot;</span><span class="o">.</span><span class="n">freeze</span>
</span><span class="line"><span class="no">JEDI_MASTER</span> <span class="o">=</span> <span class="s2">&quot;Rey Kenobi&quot;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>You can extend this to create a whole class of objects that are constant from birth - just call <code>#freeze</code> at the end of a class’s initialize function definition. This might come in handy if you’re <a href="http://blog.honeybadger.io/when-to-use-freeze-and-frozen-in-ruby/">trying to write Ruby in a functional style</a>, or if you need to prevent a programmatically important string (such as a hash key) from being modified by some other code.</p>

<h3 id="performance">2. Performance</h3>

<p>As great as this is, this is not why the paperclip developers used <code>#freeze</code> three times in that line at the beginning of this post.</p>

<p>They used it to <a href="http://www.sitepoint.com/unraveling-string-key-performance-ruby-2-2/">optimize for performance</a>. Because a frozen object can’t be modified, frozen objects in Ruby are only instantiated a single time for each unique object<sup id="fnref:1"><a href="#fn:1" class="footnote">1</a></sup> and then retained to be reused in the future. Symbols, fixnums, bignums, and floats are all frozen by default. Strings, however, aren’t, and it’s pretty common for the same string literal - such as the format string in the above example - to be called many, many times in an application.</p>

<p>Therefore, freezing a string literal that you don’t ever intend to modify (such as <code>"/"</code> and the format string <code>"%09d"</code> in the example above) in a method that gets called multiple times can result in substantial memory savings and faster performance. Ruby will allocate those string objects the first time the method is called and then just reference those existing string objects on every subsequent call.</p>

<h2 id="an-immutable-future">An Immutable Future</h2>

<p>For these and other reasons, strings are immutable in several other modern languages, such as Python, Java, C#, and Go, and Ruby is moving in the direction of freezing strings by default, too. Starting with Ruby 2.2, strings used as hash keys are frozen by default, and Ruby 3.0 will freeze all string literals by default. You can see what life is like with frozen string literals right now with the frozen_string_literal pragma, which is <a href="https://blog.blockscore.com/new-features-in-ruby-2-3/">available in Ruby 2.3 or later</a>.</p>

<p>With frozen strings, one can take advantage of the wide array of methods available to String objects without incurring the performance penalty of instantiating loads of identical objects all the time. You can also make use of external libraries, in the form of gems, middleware, or whatever, that might force you to use strings in certain places where you might normally prefer symbols. Symbols, for example, are usually used for hash keys, but some software might expect strings are hash keys. Frozen strings bring many of the benefits of using symbols while maintaining compatibility.</p>

<p>Frozen strings are also a good choice for creating objects based on user input. As Richard Schneeman points out in <a href="http://www.sitepoint.com/unraveling-string-key-performance-ruby-2-2/">his excellent post about string keys in Ruby 2.0</a>, creating symbols based on user input can lead to a particular sort of denial of service attack and other potential security problems. <a href="https://www.ruby-lang.org/en/news/2013/02/22/json-dos-cve-2013-0269/">The JSON gem suffered from this vulnerability before Ruby 2.0.0</a>, and Mr. Schneeman has some other examples of this vulnerability in <a href="http://www.sitepoint.com/symbol-gc-ruby-2-2/">his post about symbol garbage collection in Ruby 2.2</a>. Ruby now garbage collects dynamically generated symbols, so this vulnerability isn’t an issue in the latest versions of Ruby, but older versions are common enough that this is still a real concern.</p>

<hr />

<p>Even though Ruby will soon be freezing strings by default, the absolute fastest way to freeze a string is to do it manually. Embrace it. It’s the low-hanging fruit of Ruby optimization. So, when you’ve written an application or a gem or anything in Ruby and you’re looking to speed it up or reduce its memory footprint, look to <code>#freeze</code>.<sup id="fnref:2"><a href="#fn:2" class="footnote">2</a></sup></p>

<div class="footnotes">
  <ol>
    <li id="fn:1">
      <p>This is not strictly true in newer versions of Ruby - dynamically generated symbols (created using <code>#to_sym</code>) are garbage collected. <a href="#fnref:1" class="reversefootnote">&#8617;</a></p>
    </li>
    <li id="fn:2">
      <p>Mr. Schneeman has written <a href="http://www.sitepoint.com/ruby-uses-memory/">another pretty comprehensive post</a> about <code>#freeze</code> and memory usage that focuses specifically on memory optimization and suggests several tools for profiling your Ruby code for memory usage. <a href="#fnref:2" class="reversefootnote">&#8617;</a></p>
    </li>
  </ol>
</div>
]]></content>
    
  </entry>
  
  <entry>
    
    <title type="html"><![CDATA[Closures, Yield, and the Enumerable Module]]></title>
    <link href="http://flats.github.io/blog/2015/12/10/closures-yield-and-the-enumerable-module/"/>
    
    <updated>2015-12-10T18:08:24-05:00</updated>
    <id>http://flats.github.io/blog/2015/12/10/closures-yield-and-the-enumerable-module</id>
    
    <content type="html"><![CDATA[<p>I tried to make a class Enumerable by dynamically mixing in the Enumerable module and defining <code>#each</code> after declaring the class. I failed. This is my story.</p>

<hr />

<p>I was messing around with dynamically mixing in Ruby modules. One of the most useful modules in Ruby is the <code>Enumerable</code> module. It’s a total badass. So I thought I’d try mixing it into a class that I had already defined and see if that worked out.</p>

<p>The first step is including it dynamically. Maybe I can just call the include method on my class!</p>
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="no">MyClass</span><span class="o">.</span><span class="n">include</span><span class="p">(</span><span class="no">Enumerable</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>Okay! That appears to work. No exceptions. Now let’s use it. I’ll try out using <code>#reduce</code>, one of my favorite higher-order functions in Ruby.</p>
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="n">my_thing</span> <span class="o">=</span> <span class="no">MyClass</span><span class="o">.</span><span class="n">new</span>
</span><span class="line"><span class="n">my_thing</span><span class="o">.</span><span class="n">reduce</span> <span class="p">{</span> <span class="o">|</span><span class="n">thing</span><span class="o">|</span> <span class="nb">puts</span> <span class="n">thing</span> <span class="p">}</span> <span class="c1"># =&gt; NoMethodError: undefined method `each&#39; for #&lt;MyClass:0x007fe59c0e3588&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>Oops. In order to take advantage of the Enumerable module, you need both to include the module and <a href="http://www.rubydoc.info/stdlib/core/2.2.2/Enumerable">define</a> your own <code>#each</code> method.<sup id="fnref:1"><a href="#fn:1" class="footnote">1</a></sup> This makes a lot of sense - how can your class be enumerable in there’s nothing to enumerate?</p>

<p>I could just define <code>#each</code> in my class definition and be done with it, but this is all about exploring the process of dynamically modifying classes. Let’s just just pretend that doing that is not an option here and we want to add this instance method to the class after it’s been defined.</p>

<p>Defining an instance method for a class after the class definition, however, is pretty awkward. We can’t just use the dot syntax on our class, becuase that would definite our <code>#each</code> for just that one instance of <code>MyClass</code>. The best way to do this is to use <code>#define_method</code>. We can also use <code>Class#class_eval</code>, and it may be preferable from a <a href="http://greyblake.com/blog/2012/09/02/ruby-perfomance-tricks/">performance perspective</a>, but it’s not very readable and unless we absolutely need to squeeze every ounce of performance out of this code, we should probably avoid it. Also, that’s too easy. Let’s make this harder. Let’s use <code>#define_method</code>.</p>

<p>The problem here is that <code>#define_method</code> is a private method that every class inherits from <code>Module</code>. So we can’t just call <code>MyClass.define_method</code>. We have to either create a method in the class definition that in turns calls <code>#define_method</code> for us,</p>
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="k">class</span> <span class="nc">MyClass</span>
</span><span class="line">  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">create_method</span><span class="p">(</span><span class="n">method_name</span><span class="p">,</span> <span class="n">method_body</span><span class="p">)</span>
</span><span class="line">    <span class="n">define_method</span><span class="p">(</span><span class="n">method_name</span><span class="p">,</span> <span class="n">method_body</span><span class="p">)</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line"><span class="k">end</span>
</span><span class="line">
</span><span class="line"><span class="n">each_body</span> <span class="o">=</span> <span class="nb">lambda</span> <span class="p">{</span>
</span><span class="line">  <span class="k">yield</span> <span class="mi">1</span>
</span><span class="line">  <span class="k">yield</span> <span class="mi">2</span>
</span><span class="line">  <span class="k">yield</span> <span class="mi">3</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line"><span class="no">MyClass</span><span class="o">.</span><span class="n">create_method</span><span class="p">(</span><span class="ss">:each</span><span class="p">,</span> <span class="n">each_body</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>or we have to use <code>#__send__</code>.</p>
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="n">my_thing</span><span class="o">.</span><span class="n">class</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="ss">:define_method</span><span class="p">,</span> <span class="ss">:each</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">  <span class="k">yield</span> <span class="mi">1</span>
</span><span class="line">  <span class="k">yield</span> <span class="mi">2</span>
</span><span class="line">  <span class="k">yield</span> <span class="mi">3</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>All instances of <code>MyClass</code> will now have our <code>#each</code>. Great. Let’s try using it now!</p>
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="n">my_thing</span> <span class="o">=</span> <span class="no">MyClass</span><span class="o">.</span><span class="n">new</span>
</span><span class="line"><span class="n">my_thing</span><span class="o">.</span><span class="n">map</span> <span class="p">{</span> <span class="o">|</span><span class="n">thing</span><span class="o">|</span> <span class="nb">puts</span> <span class="n">thing</span> <span class="p">}</span> <span class="c1"># =&gt; no block given (yield) (LocalJumpError)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>What? <a href="http://ruby-doc.org/core-2.2.2/LocalJumpError.html">LocalJumpError</a>? No block given? I definitely just passed in a block. What went wrong?</p>

<h3 id="block-as-closures-and-the-behavior-of-yield">Block as Closures and the Behavior of <code>yield</code></h3>

<p>This is where we get into the hairy business of Ruby’s closures. Closures are a bit of a strange concept, especially in the context of object-oriented programming, in which we rely on objects for pretty much everything. Still, it’s worth knowing about closures, Ruby has them, and understanding them will help you in certain other functional or functional hybrid languages, such as JavaScript. Alan Skorkin has <a href="http://www.skorks.com/2010/05/closures-a-simple-explanation-using-ruby/">a nice, succinct definition of closures on his blog</a>:</p>

<blockquote>
  <p>A closure is basically a function/method that has the following two properties:</p>

  <p>• You can pass it around like an object (to be called later)<br />
• It remembers the values of all the variables that were in scope when the function was created. It is then able to access those variables when it is called even though they may no longer be in scope.</p>
</blockquote>

<p>I recommend Mr. Skorkin’s post about closures. It’s clear and precise and covers both Ruby’s implementation of closures and some common uses of closures. If closures are confusing to you, as they were to me, go ahead and read this post and come back when you’re finished.</p>

<p>Ruby blocks are closures (or at least almost closures - see the second footnote). When you create a block and pass it to a method, it closes over all of the variables and constants in its lexical scope. Here’s the crazy thing: Ruby blocks <em>also close over blocks</em>. They are insane cannibal constructs. So, the problem here is that the yield in the body of my <code>#each</code> is actually yielding to the implicit block (whether it’s passed or not) passed to <code>#create_method</code>. Crazy pants.</p>

<p>As Paul Inning says in <a href="https://innig.net/software/ruby/closures-in-ruby">his encyclopedic discussion of Ruby closures</a>, “<code>yield</code> can <em>only</em> refer to the block passed to the method it’s in.”<sup id="fnref:2"><a href="#fn:2" class="footnote">2</a></sup> John Mair, creator of our beloved Pry REPL, <a href="https://banisterfiend.wordpress.com/2010/11/06/behavior-of-yield-in-define_method/">believes that this is actually pretty consistent behavior</a>, and that makes sense to me - because blocks close over blocks, any method can receive a block, and a method can handle only one block at a time, <code>yield</code> has to just refer to the block passed to the method in which it finds itself.</p>

<hr />

<p>Phew. Okay, fine, I’ll just use <code>Class#class_eval</code>. Or maybe I’ll just actually <code>include Enumerable</code> and define <code>#each</code> like a normal human being.</p>

<div class="footnotes">
  <ol>
    <li id="fn:1">
      <p>Also note that (from the Ruby documentation) “If <code>Enumerable#max</code>, <code>#min</code>, or <code>#sort</code> is used, the objects in the collection must also implement a meaningful <code>&lt;=&gt;</code> operator, as these methods rely on an ordering between members of the collection.” <a href="#fnref:1" class="reversefootnote">&#8617;</a></p>
    </li>
    <li id="fn:2">
      <p>He also says that this means that blocks aren’t true closures - we can’t pass them around. We can only send them to a method and use <code>yield</code> to invoke them. In other words, they’re not <a href="https://en.wikipedia.org/wiki/First-class_function">first-class functions</a>. This is true. <a href="#fnref:2" class="reversefootnote">&#8617;</a></p>
    </li>
  </ol>
</div>
]]></content>
    
  </entry>
  
  <entry>
    
    <title type="html"><![CDATA[Getting to Know Ruby's Map and Reduce]]></title>
    <link href="http://flats.github.io/blog/2015/12/02/getting-to-know-rubys-map-and-reduce/"/>
    
    <updated>2015-12-02T21:27:10-05:00</updated>
    <id>http://flats.github.io/blog/2015/12/02/getting-to-know-rubys-map-and-reduce</id>
    
    <content type="html"><![CDATA[<p>The <code>#map</code> and <code>#reduce</code> functions are most closely associated with functional programming.<sup id="fnref:1"><a href="#fn:1" class="footnote">1</a></sup> Even so, Ruby, the object-oriented-est of all object-oriented programming languages, has robust implementations of both of these extremely expressive higher-order functions. I’m going to explore how to use these methods and what you can do with them, especially when you use them together. This will be pretty exhaustive, so be prepared for a <em>very</em> long blog post.</p>

<h1 id="first-the-basics">First, the Basics</h1>

<p>As <a href="https://en.wikipedia.org/wiki/Higher-order_function">higher-order functions</a>, each of these methods accepts a function in the form of a block. They then iterate over an enumerable object and call this block on each iteration. Where they differ is in what they do with the result of this block.</p>

<p><code>#map</code> (or <code>#collect</code>) returns an array containing the results of calling the supplied block on each element of the enumerable. In other words, map allows you to apply a function to every element of a data structure and receive the result.</p>

<p><code>#map</code> is usually called with a block, as in <code>collection.map { |element| element + 1 }</code>. If <code>collection = [1, 2, 3, 4]</code>, this will return <code>[2, 3, 4, 5]</code>. As with many other methods from the Enumerator module, if <code>#map</code> is called without a block, it will return an Enumerator.<sup id="fnref:2"><a href="#fn:2" class="footnote">2</a></sup></p>

<p><code>#reduce</code> (or <code>#inject</code>) returns a value that is the result of applying a binary operation to the return value of applying the supplied block to each element of the enumerable. Whoa. What a mouthful. In other words, <code>#reduce</code> “reduces” each element of an enumerable to a single value, accumulates that value in a single variable, and then returns the value of the accumulator. Some functional languages, such Scheme and OCaml, refer to this function as <code>fold</code>.</p>

<p>The simplest use of <code>#reduce</code> is just <code>collection.reduce(initial_value, :name_of_method)</code>. For example,</p>
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="n">array</span> <span class="o">=</span> <span class="o">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="o">]</span> <span class="c1"># =&gt; [1, 2, 3, 4]</span>
</span><span class="line"><span class="n">array</span><span class="o">.</span><span class="n">reduce</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="ss">:+</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="mi">10</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>calls the <code>#+</code> for each element in the array. The method that we specify (in this case, <code>#+</code>) has to be a binary method (a method called on one object with a single argument of another object), so we need a starting value, which we have in this case specified as 0. As we iterate through the array using reduce, this is what happens at each stage of the iteration:</p>
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="c1"># reduce sets up an accumulator variable, memo, and sets it to the initial</span>
</span><span class="line"><span class="c1"># value, which is 0.</span>
</span><span class="line"><span class="n">memo</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class="line"><span class="c1"># Now we hit the first element of the array.</span>
</span><span class="line"><span class="n">memo</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="ss">:+</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span> <span class="c1"># =&gt; 1</span>
</span><span class="line"><span class="c1"># The line above is the same as memo += 1 or memo.+(1).</span>
</span><span class="line"><span class="n">memo</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="ss">:+</span><span class="p">,</span> <span class="mi">2</span><span class="p">)</span> <span class="c1"># =&gt; 3</span>
</span><span class="line"><span class="n">memo</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="ss">:+</span><span class="p">,</span> <span class="mi">3</span><span class="p">)</span> <span class="c1"># =&gt; 6</span>
</span><span class="line"><span class="c1"># This is the last time through the array, so the value of memo at the end</span>
</span><span class="line"><span class="c1"># of this is the return value for reduce.</span>
</span><span class="line"><span class="n">memo</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="ss">:+</span><span class="p">,</span> <span class="mi">4</span><span class="p">)</span> <span class="c1"># =&gt; 10</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>There’s also the option of passing a block instead of the name of a function, which would look like</p>
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="n">array</span><span class="o">.</span><span class="n">reduce</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span> <span class="p">{</span> <span class="o">|</span><span class="n">sum</span><span class="p">,</span> <span class="n">element</span><span class="o">|</span> <span class="n">sum</span> <span class="o">+</span> <span class="n">element</span> <span class="p">}</span> <span class="c1"># =&gt; 10</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>for the example above.</p>

<p>If you don’t declare an initial value, the initial value will be the first element of the collection. This is <em>very</em> important! If, for example, you have an array of objects and you’re using <code>#reduce</code> to get the sum of an attribute, leaving out an initial value will lead to strange and undesirable results.</p>

<h1 id="some-interesting-map-and-reduce-examples">Some Interesting Map and Reduce Examples</h1>

<p>These functions are very powerful when used together. First, I’ll look at a couple of examples of using <code>#map</code> and <code>#reduce</code> on their own, and then I’ll get into an example of using reduce chained on to the end of map.</p>

<h3 id="reduce-as-an-alternative-to-recursion">Reduce as an Alternative to Recursion</h3>

<p>In his <a href="http://www.sitepoint.com/functional-programming-techniques-with-ruby-part-i/">series on functional programming in Ruby</a>, Nathan Kleyn mentions a question that Yehuda Katz asked several years ago about splitting a module name in a particular way.<sup id="fnref:3"><a href="#fn:3" class="footnote">3</a></sup> <a href="http://rubyquicktips.com/post/1018776470/embracing-functional-programming">One solution proposed by Bradley Grzesiak</a> demonstrates a particularly interesting use of <code>#reduce</code> (or, as in this case, <code>#inject</code>:</p>
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="n">module_name</span> <span class="o">=</span> <span class="s2">&quot;X::Y::Z&quot;</span>
</span><span class="line"><span class="n">module_name</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s1">&#39;::&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">inject</span><span class="p">(</span><span class="o">[]</span><span class="p">)</span> <span class="p">{</span> <span class="o">|</span><span class="n">memo</span><span class="p">,</span><span class="n">x</span><span class="o">|</span> <span class="n">memo</span><span class="o">.</span><span class="n">unshift</span><span class="p">(</span><span class="n">memo</span><span class="o">.</span><span class="n">empty?</span> <span class="p">?</span> <span class="n">x</span> <span class="p">:</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="n">memo</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span><span class="si">}</span><span class="s2">::</span><span class="si">#{</span><span class="n">x</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span> <span class="p">}</span>
</span><span class="line"><span class="o">=&gt;</span> <span class="o">[</span><span class="s2">&quot;X::Y::Z&quot;</span><span class="p">,</span> <span class="s2">&quot;X::Y&quot;</span><span class="p">,</span> <span class="s2">&quot;X&quot;</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>Let’s break this not-quite-recursive code down into separate steps.</p>

<ol>
  <li>
    <p>Mr. Grzesiak splits <code>module_name</code>, which is our starting string, on the scope resolution operator into the array [“X”, “Y”, “Z”].</p>
  </li>
  <li>
    <p>He then uses <code>#inject</code> with the <code>inject(initial)</code> syntax, which will initialize the accumulator, called <code>memo</code>, to an empty array.</p>
  </li>
  <li>
    <p>Now the iteration begins. If this new ‘memo’ array is empty, which will only happen on the first iteration of <code>#inject</code>, <code>#inject</code> adds that element (“X”) to the beginning of <code>memo</code> (using <code>Array#unshift</code>). Otherwise, <code>#inject</code> adds a string to <code>memo</code> containing the result of the previous iteration (“X”), the separator (“::”), and the current element (“Y”).</p>
  </li>
</ol>

<p>So, the final array is built backwards: [“X”], then [“X::Y”, “X”], and then finally [“X::Y::Z”, “X::Y”, “X”]. Nifty. There’s a recursive solution to this problem, but it’s not nearly as clear and concise. This is a great example of how higher-order functions can be used as an alternative to recursion.</p>

<h3 id="map-arrays-of-strings">Map Arrays of Strings</h3>

<p>The following is a chunk of code from the <a href="https://github.com/rails/rails/blob/master/actionmailer/lib/action_mailer/mail_helper.rb">MailHelper module of Rails 4.2.5’s ActionMailer module</a>.</p>
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="c1"># Returns +text+ wrapped at +len+ columns and indented +indent+ spaces.</span>
</span><span class="line"><span class="c1"># By default column length +len+ equals 72 characters and indent</span>
</span><span class="line"><span class="c1"># +indent+ equal two spaces.</span>
</span><span class="line"><span class="c1">#</span>
</span><span class="line"><span class="c1">#   my_text = &#39;Here is a sample text with more than 40 characters&#39;</span>
</span><span class="line"><span class="c1">#</span>
</span><span class="line"><span class="c1">#   format_paragraph(my_text, 25, 4)</span>
</span><span class="line"><span class="c1">#   # =&gt; &quot;    Here is a sample text with\n    more than 40 characters&quot;</span>
</span><span class="line"><span class="k">def</span> <span class="nf">format_paragraph</span><span class="p">(</span><span class="n">text</span><span class="p">,</span> <span class="n">len</span> <span class="o">=</span> <span class="mi">72</span><span class="p">,</span> <span class="n">indent</span> <span class="o">=</span> <span class="mi">2</span><span class="p">)</span>
</span><span class="line">  <span class="n">sentences</span> <span class="o">=</span> <span class="o">[[]]</span>
</span><span class="line">
</span><span class="line">  <span class="n">text</span><span class="o">.</span><span class="n">split</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">word</span><span class="o">|</span>
</span><span class="line">    <span class="k">if</span> <span class="n">sentences</span><span class="o">.</span><span class="n">first</span><span class="o">.</span><span class="n">present?</span> <span class="o">&amp;&amp;</span> <span class="p">(</span><span class="n">sentences</span><span class="o">.</span><span class="n">last</span> <span class="o">+</span> <span class="o">[</span><span class="n">word</span><span class="o">]</span><span class="p">)</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="s1">&#39; &#39;</span><span class="p">)</span><span class="o">.</span><span class="n">length</span> <span class="o">&gt;</span> <span class="n">len</span>
</span><span class="line">      <span class="n">sentences</span> <span class="o">&lt;&lt;</span> <span class="o">[</span><span class="n">word</span><span class="o">]</span>
</span><span class="line">    <span class="k">else</span>
</span><span class="line">      <span class="n">sentences</span><span class="o">.</span><span class="n">last</span> <span class="o">&lt;&lt;</span> <span class="n">word</span>
</span><span class="line">    <span class="k">end</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="n">indentation</span> <span class="o">=</span> <span class="s2">&quot; &quot;</span> <span class="o">*</span> <span class="n">indent</span>
</span><span class="line">  <span class="n">sentences</span><span class="o">.</span><span class="n">map!</span> <span class="p">{</span> <span class="o">|</span><span class="n">sentence</span><span class="o">|</span>
</span><span class="line">    <span class="s2">&quot;</span><span class="si">#{</span><span class="n">indentation</span><span class="si">}#{</span><span class="n">sentence</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="s1">&#39; &#39;</span><span class="p">)</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class="line">  <span class="p">}</span><span class="o">.</span><span class="n">join</span> <span class="s2">&quot;</span><span class="se">\n</span><span class="s2">&quot;</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>There’s nothing too remarkable about this method and its use of map, but I’m going to break it down because it’s a good example of <code>#map</code> in some very widely used code. This code is proobably executing somewhere at this very moment.</p>

<p>As the comment says, this method <code>format_paragraph</code> takes a chunk of text that needs formatting, a line length that defaults to 72, and an indent length (in spaces) that defatuls to 2. There are two steps to this process: first break the text into lines, and then indent each line by the specified indent size.</p>

<p>In the first step, our function creates an array of arrays <code>sentences</code>, each array of which comprises the strings that make up each line. The combined character count of the words in each of these nested arrays is not greater than the specified line length (<code>len</code>).</p>

<p>The second step is where we use map to add the proper indentation to each line. After building up the indentation as a string of whitespace using <code>String#*</code>, our function mutates the array of line arrays by using <code>#map!</code> to join the words with a space (rebuild then sentence) and prepend the indentation spaces. Then the lines are all joined with line breaks. Now we have a formatted paragraph.</p>

<h3 id="map-and-reduce-in-tandem">Map and Reduce in Tandem</h3>

<p>Haitham Mohammad put <code>#transpose</code> <a href="http://rubyquicktips.com/post/18842314838/some-array-magic-using-transpose-map-and-reduce">through its paces</a> on <a href="http://rubyquicktips.com/">Ruby Quicktips</a>, the same site that gave us the above solution. <code>#transpose</code>, <a href="http://ruby-doc.org/core-2.2.0/Array.html#method-i-transpose">according to the Ruby documentation</a>, “assumes that self is an array of arrays and transposes the rows and columns.” In other words, if you imagine an array of arrays as rows in a table, <code>#transpose</code> will return the columns from that table.</p>

<p>Mr. Mohammad then shows us how to get the sum of each column of table represented by an array of row arrays.</p>
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="n">a</span> <span class="o">=</span> <span class="o">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="o">]</span>
</span><span class="line"><span class="n">b</span> <span class="o">=</span> <span class="o">[</span><span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="o">]</span>
</span><span class="line"><span class="n">c</span> <span class="o">=</span> <span class="o">[</span><span class="mi">7</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">9</span><span class="o">]</span>
</span><span class="line">
</span><span class="line"><span class="o">[</span><span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">,</span> <span class="n">c</span><span class="o">].</span><span class="n">transpose</span><span class="o">.</span><span class="n">map</span> <span class="p">{</span> <span class="o">|</span><span class="n">x</span><span class="o">|</span> <span class="n">x</span><span class="o">.</span><span class="n">reduce</span> <span class="ss">:+</span> <span class="p">}</span>
</span><span class="line"><span class="c1"># =&gt; [12, 15, 18]</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<hr />

<p>So there’s a bit about <code>#map</code> and <code>#reduce</code>. There’s a lot more to discuss - for example, these methods <a href="http://yeungda.com/2011/11/01/ruby-lambda-keyword.html">can take lambdas, too!</a> - but this is already a very long post.</p>

<p>I love these guys.</p>

<div class="footnotes">
  <ol>
    <li id="fn:1">
      <p><a href="https://en.wikipedia.org/wiki/Lisp_(programming_language)">Lisp</a>, one of the oldest high-level programming languages, pioneered the use of higher-order functions. While it supports several different programming paradigms, Lisp and its most popular dialects, Common Lisp and Scheme, are most commonly used to program in the functional programming paradigm. <a href="#fnref:1" class="reversefootnote">&#8617;</a></p>
    </li>
    <li id="fn:2">
      <p>Enumerators are a large topic in and of themselves - for more information, see the <a href="http://ruby-doc.org/core-2.2.0/Enumerator.html">Ruby documentation</a>. <a href="#fnref:2" class="reversefootnote">&#8617;</a></p>
    </li>
    <li id="fn:3">
      <p>I’m curious as to the exact context for this problem. Obviously this has something to do with parsing a call to a class or module that uses the scope resolution operator, but if anyone has any more detils, <a href="&#109;&#097;&#105;&#108;&#116;&#111;:&#100;&#097;&#118;&#105;&#100;&#046;&#102;&#108;&#097;&#104;&#101;&#114;&#116;&#121;&#064;&#102;&#108;&#097;&#116;&#105;&#114;&#111;&#110;&#115;&#099;&#104;&#111;&#111;&#108;&#046;&#099;&#111;&#109;">let me know</a>. <a href="#fnref:3" class="reversefootnote">&#8617;</a></p>
    </li>
  </ol>
</div>
]]></content>
    
  </entry>
  
</feed>